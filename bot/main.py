import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from rag_system import rag_search
from document_handler import create_vector_db

# –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")


if not TELEGRAM_BOT_TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã!")
# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


# üîπ **–ö–æ–º–∞–Ω–¥–∞ /start**
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (PDF, TXT, DOCX) –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å!")


# üîπ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤**
@dp.message(F.text)
async def handle_message(message: Message):
    user_text = message.text
    response = rag_search(user_text)
    await message.answer(response)


# üîπ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤**
@dp.message(F.document)
async def handle_file_upload(message: Message):
    document = message.document
    file_name = document.file_name

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file_path = os.path.join("data", file_name)
    await bot.download(document.file_id, destination=file_path)

    await message.answer(f"‚úÖ –§–∞–π–ª `{file_name}` –∑–∞–≥—Ä—É–∂–µ–Ω. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –Ω–µ–º—É!")

    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –±–∞–∑—É —Å –Ω–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    create_vector_db()


# üîπ **–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞**
async def main():
    print("\n‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –±–∞–∑—É –∏ Google.\n")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
