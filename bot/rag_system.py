import os
import random
import requests
import logging
from googleapiclient.discovery import build
from together_model import get_together_response
from dotenv import load_dotenv
from document_handler import create_vector_db, load_user_questions, save_user_question
from langchain_community.vectorstores import FAISS
from langchain_community.embeddings import HuggingFaceEmbeddings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á–∏
load_dotenv()
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
GOOGLE_CX = os.getenv("GOOGLE_CX")
TOGETHER_API_KEY = os.getenv("TOGETHER_API_KEY")

# –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
VECTOR_DB_PATH = "vector_db"

# –°–æ–∑–¥–∞—ë–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ (Hugging Face)
embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")


# üîπ **–ü–æ–∏—Å–∫ –≤ Google —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º**
google_cache = {}

def google_search(query):
    """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ Google —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤."""
    if query in google_cache:
        logging.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
        return google_cache[query]

    try:
        service = build("customsearch", "v1", developerKey=GOOGLE_API_KEY)
        res = service.cse().list(q=query, cx=GOOGLE_CX, num=3).execute()
        search_results = "\n\n".join([item["snippet"] for item in res.get("items", [])]) if "items" in res else None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        google_cache[query] = search_results
        return search_results

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ Google Search: {e}")
        return None


# üîπ **–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤**
def rag_search(query: str) -> str:
    """–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ —Å —É—á—ë—Ç–æ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, Google –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""

    logging.info(f"üîé –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {query}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞
    if not os.path.exists(VECTOR_DB_PATH):
        logging.warning("‚ö†Ô∏è –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—ë–º...")
        create_vector_db()

    # 1Ô∏è‚É£ **–ü–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ**
    vector_db = FAISS.load_local(VECTOR_DB_PATH, embeddings, allow_dangerous_deserialization=True)
    docs = vector_db.similarity_search(query, k=3)

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    prompt_base = (
        "–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. "
        "–¢—ã –¥–æ–ª–∂–µ–Ω –¥–∞—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. "
        "–ò—Å–ø–æ–ª—å–∑—É–π –º–∞–∫—Å–∏–º—É–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å. "
        "–ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è. "
        "–û—Ç–≤–µ—á–∞–π —á—ë—Ç–∫–æ, –Ω–µ –±–æ–ª–µ–µ 4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
    )

    if docs:
        context = "\n\n".join([doc.page_content for doc in docs])
        prompt = f"{prompt_base}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n–í–æ–ø—Ä–æ—Å: {query}\n–û—Ç–≤–µ—Ç:"
        response = get_together_response(prompt, max_tokens=200)

        logging.info("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        save_user_question(query, response)
        return response

    # 2Ô∏è‚É£ **–ü–æ–∏—Å–∫ –≤ Google**
    search_results = google_search(query)
    if search_results:
        prompt = f"{prompt_base}\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ Google:\n{search_results}\n\n–í–æ–ø—Ä–æ—Å: {query}\n–û—Ç–≤–µ—Ç:"
        response = get_together_response(prompt, max_tokens=200)

        logging.info("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Google.")
        save_user_question(query, response)
        return response

    # 3Ô∏è‚É£ **–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**
    logging.warning(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å...")
    return get_together_response(f"{prompt_base}\n\n–í–æ–ø—Ä–æ—Å: {query}\n–û—Ç–≤–µ—Ç:", max_tokens=200)
